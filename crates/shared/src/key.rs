use anyhow::Context;
use itertools::Itertools;
use serde::{Deserialize, Serialize};
use std::collections::BTreeSet;

#[derive(thiserror::Error, Debug)]
#[error("Invalid key alias {0:?}")]
pub struct InvalidKeyAlias(String);

/// Literal USB key id that the os interprets based on provided modifiers.
/// See [this for more](https://www.reddit.com/r/ErgoMechKeyboards/comments/ujhp0g/comment/i7j0nko/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button).
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Serialize, Deserialize)]
pub enum KeyAlias {
	Backquote,
	Backslash,
	BracketLeft,
	BracketRight,
	Comma,
	Digit0,
	Digit1,
	Digit2,
	Digit3,
	Digit4,
	Digit5,
	Digit6,
	Digit7,
	Digit8,
	Digit9,
	Equal,
	//IntlBackslash,
	//IntlRo,
	//IntlYen,
	KeyA,
	KeyB,
	KeyC,
	KeyD,
	KeyE,
	KeyF,
	KeyG,
	KeyH,
	KeyI,
	KeyJ,
	KeyK,
	KeyL,
	KeyM,
	KeyN,
	KeyO,
	KeyP,
	KeyQ,
	KeyR,
	KeyS,
	KeyT,
	KeyU,
	KeyV,
	KeyW,
	KeyX,
	KeyY,
	KeyZ,
	Minus,
	Period,
	Quote,
	Semicolon,
	Slash,
	AltLeft,
	AltRight,
	Backspace,
	CapsLock,
	//ContextMenu,
	ControlLeft,
	ControlRight,
	Enter,
	MetaLeft,
	MetaRight,
	ShiftLeft,
	ShiftRight,
	Space,
	Tab,
	//Convert,
	//KanaMode,
	//Lang1,
	//Lang2,
	//Lang3,
	//Lang4,
	//Lang5,
	//NonConvert,
	Delete,
	End,
	//Help,
	Home,
	Insert,
	PageDown,
	PageUp,
	ArrowDown,
	ArrowLeft,
	ArrowRight,
	ArrowUp,
	//NumLock,
	//Numpad0,
	//Numpad1,
	//Numpad2,
	//Numpad3,
	//Numpad4,
	//Numpad5,
	//Numpad6,
	//Numpad7,
	//Numpad8,
	//Numpad9,
	//NumpadAdd,
	//NumpadBackspace,
	//NumpadClear,
	//NumpadClearEntry,
	//NumpadComma,
	//NumpadDecimal,
	//NumpadDivide,
	//NumpadEnter,
	//NumpadEqual,
	//NumpadHash,
	//NumpadMemoryAdd,
	//NumpadMemoryClear,
	//NumpadMemoryRecall,
	//NumpadMemoryStore,
	//NumpadMemorySubtract,
	//NumpadMultiply,
	//NumpadParenLeft,
	//NumpadParenRight,
	//NumpadStar,
	//NumpadSubtract,
	Escape,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	F9,
	F10,
	F11,
	F12,
	F13,
	F14,
	F15,
	F16,
	F17,
	F18,
	F19,
	F20,
	F21,
	F22,
	F23,
	F24,
	Fn,
	PrintScreen,
	ScrollLock,
	Pause,
	//BrowserBack,
	//BrowserFavorites,
	//BrowserForward,
	//BrowserHome,
	//BrowserRefresh,
	//BrowserSearch,
	//BrowserStop,
	//Eject,
	//LaunchApp1,
	//LaunchApp2,
	//LaunchMail,
	MediaPlayPause,
	//MediaSelect,
	//MediaStop,
	MediaTrackNext,
	MediaTrackPrevious,
	//Power,
	//Sleep,
	AudioVolumeDown,
	AudioVolumeMute,
	AudioVolumeUp,
	//WakeUp,
	//Again,
	//Copy,
	//Cut,
	//Find,
	//Open,
	//Paste,
	//Props,
	//Select,
	//Undo,
	//Gamepad0,
	//Gamepad1,
	//Gamepad2,
	//Gamepad3,
	//Gamepad4,
	//Gamepad5,
	//Gamepad6,
	//Gamepad7,
	//Gamepad8,
	//Gamepad9,
	//Gamepad10,
	//Gamepad11,
	//Gamepad12,
	//Gamepad13,
	//Gamepad14,
	//Gamepad15,
	//Gamepad16,
	//Gamepad17,
	//Gamepad18,
	//Gamepad19,
	//BrightnessDown,
	//BrightnessUp,
	//DisplayToggleIntExt,
	//KeyboardLayoutSelect,
	//LaunchAssistant,
	//LaunchControlPanel,
	//LaunchScreenSaver,
	//MailForward,
	//MailReply,
	//MailSend,
	//MediaFastForward,
	//MediaPlay,
	//MediaPause,
	//MediaRecord,
	//MediaRewind,
	//MicrophoneMuteToggle,
	//PrivacyScreenToggle,
	//SelectTask,
	//ShowAllWindows,
	//ZoomToggle,

	// Aliases for modified keys
	Tilde,
	Exclamation,
	At,
	Hash,
	Dollar,
	Percent,
	Caret,
	Ampersand,
	Star,
	ParenLeft,
	ParenRight,
	BraceLeft,
	BraceRight,
	Underscore,
	Plus,
	Pipe,
	Colon,
	QuoteDouble,
	LessThan,
	GreaterThan,
	Question,
}

impl KeyAlias {
	pub fn is_alpha(&self) -> bool {
		static ALPHA: [KeyAlias; 26] = [
			KeyAlias::KeyA,
			KeyAlias::KeyB,
			KeyAlias::KeyC,
			KeyAlias::KeyD,
			KeyAlias::KeyE,
			KeyAlias::KeyF,
			KeyAlias::KeyG,
			KeyAlias::KeyH,
			KeyAlias::KeyI,
			KeyAlias::KeyJ,
			KeyAlias::KeyK,
			KeyAlias::KeyL,
			KeyAlias::KeyM,
			KeyAlias::KeyN,
			KeyAlias::KeyO,
			KeyAlias::KeyP,
			KeyAlias::KeyQ,
			KeyAlias::KeyR,
			KeyAlias::KeyS,
			KeyAlias::KeyT,
			KeyAlias::KeyU,
			KeyAlias::KeyV,
			KeyAlias::KeyW,
			KeyAlias::KeyX,
			KeyAlias::KeyY,
			KeyAlias::KeyZ,
		];
		ALPHA.contains(&self)
	}
}

impl std::fmt::Display for KeyAlias {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		write!(
			f,
			"{}",
			match self {
				Self::Backquote => "`",
				Self::Backslash => "\\",
				Self::BracketLeft => "[",
				Self::BracketRight => "]",
				Self::Comma => ",",
				Self::Digit0 => "0",
				Self::Digit1 => "1",
				Self::Digit2 => "2",
				Self::Digit3 => "3",
				Self::Digit4 => "4",
				Self::Digit5 => "5",
				Self::Digit6 => "6",
				Self::Digit7 => "7",
				Self::Digit8 => "8",
				Self::Digit9 => "9",
				Self::Equal => "=",
				//IntlBackslash,
				//IntlRo,
				//IntlYen,
				Self::KeyA => "A",
				Self::KeyB => "B",
				Self::KeyC => "C",
				Self::KeyD => "D",
				Self::KeyE => "E",
				Self::KeyF => "F",
				Self::KeyG => "G",
				Self::KeyH => "H",
				Self::KeyI => "I",
				Self::KeyJ => "J",
				Self::KeyK => "K",
				Self::KeyL => "L",
				Self::KeyM => "M",
				Self::KeyN => "N",
				Self::KeyO => "O",
				Self::KeyP => "P",
				Self::KeyQ => "Q",
				Self::KeyR => "R",
				Self::KeyS => "S",
				Self::KeyT => "T",
				Self::KeyU => "U",
				Self::KeyV => "V",
				Self::KeyW => "W",
				Self::KeyX => "X",
				Self::KeyY => "Y",
				Self::KeyZ => "Z",
				Self::Minus => "-",
				Self::Period => ".",
				Self::Quote => "'",
				Self::Semicolon => ";",
				Self::Slash => "/",
				Self::AltLeft => "LAlt",
				Self::AltRight => "RAlt",
				Self::Backspace => "Backspace",
				Self::CapsLock => "CapsLock",
				//ContextMenu,
				Self::ControlLeft => "LControl",
				Self::ControlRight => "RControl",
				Self::Enter => "Enter",
				Self::MetaLeft => "LMeta",
				Self::MetaRight => "RMeta",
				Self::ShiftLeft => "LShift",
				Self::ShiftRight => "RShift",
				Self::Space => "Space",
				Self::Tab => "Tab",
				//Convert,
				//KanaMode,
				//Lang1,
				//Lang2,
				//Lang3,
				//Lang4,
				//Lang5,
				//NonConvert,
				Self::Delete => "Delete",
				Self::End => "End",
				//Help,
				Self::Home => "Home",
				Self::Insert => "Insert",
				Self::PageDown => "PageDown",
				Self::PageUp => "PageUp",
				Self::ArrowDown => "ArrowDown",
				Self::ArrowLeft => "ArrowLeft",
				Self::ArrowRight => "ArrowRight",
				Self::ArrowUp => "ArrowUp",
				//NumLock,
				//Numpad0,
				//Numpad1,
				//Numpad2,
				//Numpad3,
				//Numpad4,
				//Numpad5,
				//Numpad6,
				//Numpad7,
				//Numpad8,
				//Numpad9,
				//NumpadAdd,
				//NumpadBackspace,
				//NumpadClear,
				//NumpadClearEntry,
				//NumpadComma,
				//NumpadDecimal,
				//NumpadDivide,
				//NumpadEnter,
				//NumpadEqual,
				//NumpadHash,
				//NumpadMemoryAdd,
				//NumpadMemoryClear,
				//NumpadMemoryRecall,
				//NumpadMemoryStore,
				//NumpadMemorySubtract,
				//NumpadMultiply,
				//NumpadParenLeft,
				//NumpadParenRight,
				//NumpadStar,
				//NumpadSubtract,
				Self::Escape => "Escape",
				Self::F1 => "F1",
				Self::F2 => "F2",
				Self::F3 => "F3",
				Self::F4 => "F4",
				Self::F5 => "F5",
				Self::F6 => "F6",
				Self::F7 => "F7",
				Self::F8 => "F8",
				Self::F9 => "F9",
				Self::F10 => "F10",
				Self::F11 => "F11",
				Self::F12 => "F12",
				Self::F13 => "F13",
				Self::F14 => "F14",
				Self::F15 => "F15",
				Self::F16 => "F16",
				Self::F17 => "F17",
				Self::F18 => "F18",
				Self::F19 => "F19",
				Self::F20 => "F20",
				Self::F21 => "F21",
				Self::F22 => "F22",
				Self::F23 => "F23",
				Self::F24 => "F24",
				Self::Fn => "Fn",
				Self::PrintScreen => "PrintScreen",
				Self::ScrollLock => "ScrollLock",
				Self::Pause => "Pause",
				//BrowserBack,
				//BrowserFavorites,
				//BrowserForward,
				//BrowserHome,
				//BrowserRefresh,
				//BrowserSearch,
				//BrowserStop,
				//Eject,
				//LaunchApp1,
				//LaunchApp2,
				//LaunchMail,
				Self::MediaPlayPause => "MediaPlayPause",
				//MediaSelect,
				//MediaStop,
				Self::MediaTrackNext => "MediaTrackNext",
				Self::MediaTrackPrevious => "MediaTrackPrevious",
				//Power,
				//Sleep,
				Self::AudioVolumeDown => "AudioVolumeDown",
				Self::AudioVolumeMute => "AudioVolumeMute",
				Self::AudioVolumeUp => "AudioVolumeUp",
				//WakeUp,
				//Again,
				//Copy,
				//Cut,
				//Find,
				//Open,
				//Paste,
				//Props,
				//Select,
				//Undo,
				//Gamepad0,
				//Gamepad1,
				//Gamepad2,
				//Gamepad3,
				//Gamepad4,
				//Gamepad5,
				//Gamepad6,
				//Gamepad7,
				//Gamepad8,
				//Gamepad9,
				//Gamepad10,
				//Gamepad11,
				//Gamepad12,
				//Gamepad13,
				//Gamepad14,
				//Gamepad15,
				//Gamepad16,
				//Gamepad17,
				//Gamepad18,
				//Gamepad19,
				//BrightnessDown,
				//BrightnessUp,
				//DisplayToggleIntExt,
				//KeyboardLayoutSelect,
				//LaunchAssistant,
				//LaunchControlPanel,
				//LaunchScreenSaver,
				//MailForward,
				//MailReply,
				//MailSend,
				//MediaFastForward,
				//MediaPlay,
				//MediaPause,
				//MediaRecord,
				//MediaRewind,
				//MicrophoneMuteToggle,
				//PrivacyScreenToggle,
				//SelectTask,
				//ShowAllWindows,
				//ZoomToggle,
				Self::Tilde => "~",
				Self::Exclamation => "!",
				Self::At => "@",
				Self::Hash => "#",
				Self::Dollar => "$",
				Self::Percent => "%",
				Self::Caret => "^",
				Self::Ampersand => "&",
				Self::Star => "*",
				Self::ParenLeft => "(",
				Self::ParenRight => ")",
				Self::BraceLeft => "{",
				Self::BraceRight => "}",
				Self::Underscore => "_",
				Self::Plus => "+",
				Self::Pipe => "|",
				Self::Colon => ":",
				Self::QuoteDouble => "\"",
				Self::LessThan => "<",
				Self::GreaterThan => ">",
				Self::Question => "?",
			}
		)
	}
}

impl std::str::FromStr for KeyAlias {
	type Err = InvalidKeyAlias;

	fn from_str(s: &str) -> Result<Self, Self::Err> {
		match s {
			"`" => Ok(Self::Backquote),
			"\\" => Ok(Self::Backslash),
			"[" => Ok(Self::BracketLeft),
			"]" => Ok(Self::BracketRight),
			"," => Ok(Self::Comma),
			"0" => Ok(Self::Digit0),
			"1" => Ok(Self::Digit1),
			"2" => Ok(Self::Digit2),
			"3" => Ok(Self::Digit3),
			"4" => Ok(Self::Digit4),
			"5" => Ok(Self::Digit5),
			"6" => Ok(Self::Digit6),
			"7" => Ok(Self::Digit7),
			"8" => Ok(Self::Digit8),
			"9" => Ok(Self::Digit9),
			"=" => Ok(Self::Equal),
			//IntlBackslash,
			//IntlRo,
			//IntlYen,
			"A" => Ok(Self::KeyA),
			"B" => Ok(Self::KeyB),
			"C" => Ok(Self::KeyC),
			"D" => Ok(Self::KeyD),
			"E" => Ok(Self::KeyE),
			"F" => Ok(Self::KeyF),
			"G" => Ok(Self::KeyG),
			"H" => Ok(Self::KeyH),
			"I" => Ok(Self::KeyI),
			"J" => Ok(Self::KeyJ),
			"K" => Ok(Self::KeyK),
			"L" => Ok(Self::KeyL),
			"M" => Ok(Self::KeyM),
			"N" => Ok(Self::KeyN),
			"O" => Ok(Self::KeyO),
			"P" => Ok(Self::KeyP),
			"Q" => Ok(Self::KeyQ),
			"R" => Ok(Self::KeyR),
			"S" => Ok(Self::KeyS),
			"T" => Ok(Self::KeyT),
			"U" => Ok(Self::KeyU),
			"V" => Ok(Self::KeyV),
			"W" => Ok(Self::KeyW),
			"X" => Ok(Self::KeyX),
			"Y" => Ok(Self::KeyY),
			"Z" => Ok(Self::KeyZ),
			"-" => Ok(Self::Minus),
			"." => Ok(Self::Period),
			"'" => Ok(Self::Quote),
			";" => Ok(Self::Semicolon),
			"/" => Ok(Self::Slash),
			"LAlt" => Ok(Self::AltLeft),
			"RAlt" => Ok(Self::AltRight),
			"Backspace" => Ok(Self::Backspace),
			"CapsLock" => Ok(Self::CapsLock),
			//ContextMenu,
			"LControl" => Ok(Self::ControlLeft),
			"RControl" => Ok(Self::ControlRight),
			"Enter" => Ok(Self::Enter),
			"LMeta" => Ok(Self::MetaLeft),
			"RMeta" => Ok(Self::MetaRight),
			"LShift" => Ok(Self::ShiftLeft),
			"RShift" => Ok(Self::ShiftRight),
			"Space" => Ok(Self::Space),
			"Tab" => Ok(Self::Tab),
			//Convert,
			//KanaMode,
			//Lang1,
			//Lang2,
			//Lang3,
			//Lang4,
			//Lang5,
			//NonConvert,
			"Delete" => Ok(Self::Delete),
			"End" => Ok(Self::End),
			//Help,
			"Home" => Ok(Self::Home),
			"Insert" => Ok(Self::Insert),
			"PageDown" => Ok(Self::PageDown),
			"PageUp" => Ok(Self::PageUp),
			"ArrowDown" => Ok(Self::ArrowDown),
			"ArrowLeft" => Ok(Self::ArrowLeft),
			"ArrowRight" => Ok(Self::ArrowRight),
			"ArrowUp" => Ok(Self::ArrowUp),
			//NumLock,
			//Numpad0,
			//Numpad1,
			//Numpad2,
			//Numpad3,
			//Numpad4,
			//Numpad5,
			//Numpad6,
			//Numpad7,
			//Numpad8,
			//Numpad9,
			//NumpadAdd,
			//NumpadBackspace,
			//NumpadClear,
			//NumpadClearEntry,
			//NumpadComma,
			//NumpadDecimal,
			//NumpadDivide,
			//NumpadEnter,
			//NumpadEqual,
			//NumpadHash,
			//NumpadMemoryAdd,
			//NumpadMemoryClear,
			//NumpadMemoryRecall,
			//NumpadMemoryStore,
			//NumpadMemorySubtract,
			//NumpadMultiply,
			//NumpadParenLeft,
			//NumpadParenRight,
			//NumpadStar,
			//NumpadSubtract,
			"Escape" => Ok(Self::Escape),
			"F1" => Ok(Self::F1),
			"F2" => Ok(Self::F2),
			"F3" => Ok(Self::F3),
			"F4" => Ok(Self::F4),
			"F5" => Ok(Self::F5),
			"F6" => Ok(Self::F6),
			"F7" => Ok(Self::F7),
			"F8" => Ok(Self::F8),
			"F9" => Ok(Self::F9),
			"F10" => Ok(Self::F10),
			"F11" => Ok(Self::F11),
			"F12" => Ok(Self::F12),
			"F13" => Ok(Self::F13),
			"F14" => Ok(Self::F14),
			"F15" => Ok(Self::F15),
			"F16" => Ok(Self::F16),
			"F17" => Ok(Self::F17),
			"F18" => Ok(Self::F18),
			"F19" => Ok(Self::F19),
			"F20" => Ok(Self::F20),
			"F21" => Ok(Self::F21),
			"F22" => Ok(Self::F22),
			"F23" => Ok(Self::F23),
			"F24" => Ok(Self::F24),
			"Fn" => Ok(Self::Fn),
			"PrintScreen" => Ok(Self::PrintScreen),
			"ScrollLock" => Ok(Self::ScrollLock),
			"Pause" => Ok(Self::Pause),
			//BrowserBack,
			//BrowserFavorites,
			//BrowserForward,
			//BrowserHome,
			//BrowserRefresh,
			//BrowserSearch,
			//BrowserStop,
			//Eject,
			//LaunchApp1,
			//LaunchApp2,
			//LaunchMail,
			"MediaPlayPause" => Ok(Self::MediaPlayPause),
			//MediaSelect,
			//MediaStop,
			"MediaTrackNext" => Ok(Self::MediaTrackNext),
			"MediaTrackPrevious" => Ok(Self::MediaTrackPrevious),
			//Power,
			//Sleep,
			"AudioVolumeDown" => Ok(Self::AudioVolumeDown),
			"AudioVolumeMute" => Ok(Self::AudioVolumeMute),
			"AudioVolumeUp" => Ok(Self::AudioVolumeUp),
			//WakeUp,
			//Again,
			//Copy,
			//Cut,
			//Find,
			//Open,
			//Paste,
			//Props,
			//Select,
			//Undo,
			//Gamepad0,
			//Gamepad1,
			//Gamepad2,
			//Gamepad3,
			//Gamepad4,
			//Gamepad5,
			//Gamepad6,
			//Gamepad7,
			//Gamepad8,
			//Gamepad9,
			//Gamepad10,
			//Gamepad11,
			//Gamepad12,
			//Gamepad13,
			//Gamepad14,
			//Gamepad15,
			//Gamepad16,
			//Gamepad17,
			//Gamepad18,
			//Gamepad19,
			//BrightnessDown,
			//BrightnessUp,
			//DisplayToggleIntExt,
			//KeyboardLayoutSelect,
			//LaunchAssistant,
			//LaunchControlPanel,
			//LaunchScreenSaver,
			//MailForward,
			//MailReply,
			//MailSend,
			//MediaFastForward,
			//MediaPlay,
			//MediaPause,
			//MediaRecord,
			//MediaRewind,
			//MicrophoneMuteToggle,
			//PrivacyScreenToggle,
			//SelectTask,
			//ShowAllWindows,
			//ZoomToggle,
			"~" => Ok(Self::Tilde),
			"!" => Ok(Self::Exclamation),
			"@" => Ok(Self::At),
			"#" => Ok(Self::Hash),
			"$" => Ok(Self::Dollar),
			"%" => Ok(Self::Percent),
			"^" => Ok(Self::Caret),
			"&" => Ok(Self::Ampersand),
			"*" => Ok(Self::Star),
			"(" => Ok(Self::ParenLeft),
			")" => Ok(Self::ParenRight),
			"{" => Ok(Self::BraceLeft),
			"}" => Ok(Self::BraceRight),
			"_" => Ok(Self::Underscore),
			"+" => Ok(Self::Plus),
			"|" => Ok(Self::Pipe),
			":" => Ok(Self::Colon),
			"\"" => Ok(Self::QuoteDouble),
			"<" => Ok(Self::LessThan),
			">" => Ok(Self::GreaterThan),
			"?" => Ok(Self::Question),
			// Unknown
			s => Err(InvalidKeyAlias(s.to_owned())),
		}
	}
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]

pub struct KeySet(BTreeSet<KeyAlias>);

impl KeySet {
	pub fn get_single(&self) -> Option<KeyAlias> {
		match self.0.len() {
			1 => self.iter().next().cloned(),
			_ => None,
		}
	}

	pub fn iter(&self) -> impl Iterator<Item = &KeyAlias> {
		self.0.iter()
	}
}

impl std::fmt::Display for KeySet {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		write!(f, "{}", self.0.iter().map(|alias| alias.to_string()).join("+"))
	}
}

impl std::str::FromStr for KeySet {
	type Err = anyhow::Error;
	fn from_str(s: &str) -> Result<Self, Self::Err> {
		let mut combo = BTreeSet::new();
		if s == "+" {
			combo.insert(KeyAlias::from_str(s)?);
			return Ok(Self(combo));
		}
		for alias_str in s.split("+") {
			let alias = KeyAlias::from_str(alias_str);
			let alias = alias.with_context(|| format!("processing combo {s:?} w/ substr {alias_str:?}"));
			combo.insert(alias?);
		}
		Ok(Self(combo))
	}
}
